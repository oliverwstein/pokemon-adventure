// In: src/move_data.rs

use crate::errors::{MoveDataError, MoveDataResult};
// CORRECTED: Import types directly from the schema crate where they are defined.
use schema::{Move, MoveCategory, MoveData, MoveEffect, PokemonType};

// This line includes the functions generated by `build.rs` (e.g., get_compiled_move_data).
// It correctly belongs here.
include!(concat!(env!("OUT_DIR"), "/generated_data.rs"));

// REMOVED: The `pub use` statements have been moved to `src/lib.rs` for a cleaner API.

/// Get move data for a specific move. This is the public data access function.
pub fn get_move_data(move_: Move) -> MoveDataResult<MoveData> {
    // This logic is sound and remains unchanged.
    match move_ {
        Move::HittingItself => Ok(MoveData {
            name: "Hit Itself".to_string(),
            move_type: PokemonType::Typeless,
            power: Some(40),
            category: MoveCategory::Physical,
            accuracy: None,
            max_pp: 0,
            effects: vec![],
        }),
        Move::Struggle => Ok(MoveData {
            name: "Struggle".to_string(),
            move_type: PokemonType::Typeless,
            power: Some(50),
            category: MoveCategory::Physical,
            accuracy: Some(90),
            max_pp: 0,
            effects: vec![MoveEffect::Recoil(25)],
        }),
        _ => get_compiled_move_data()
            .get(&move_)
            .cloned()
            .ok_or(MoveDataError::MoveNotFound(move_)),
    }
}

/// Get the max PP for a specific move.
pub fn get_move_max_pp(move_: Move) -> MoveDataResult<u8> {
    // This logic is sound and remains unchanged.
    get_move_data(move_).map(|data| data.max_pp)
}
